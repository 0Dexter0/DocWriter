@page "/"
@using DocWriter.Shared.Models

<MudGrid Style="height: 100%;">
    <div style="visibility: @HomeStateContainer.Visibility">
        <MudItem>
            <MudDrawer @bind-Open="@HomeStateContainer.IsDrawerOpen" Anchor="Anchor.Left" Width="300px" Variant="DrawerVariant.Mini" ClipMode="DrawerClipMode.Always" Class="flex-shrink-1">
                <MudDrawerHeader>
                    <MudIconButton @onclick="ToggleDrawer" Icon="@(HomeStateContainer.IsDrawerOpen ? Icons.Material.Filled.ArrowLeft : Icons.Material.Filled.ArrowRight)" Style="margin-left: -20px;"/>
                </MudDrawerHeader>
                <MudDrawerContainer Class="@("mud-height-full " + (!HomeStateContainer.IsDrawerOpen ? "overflow-x-hidden" : ""))" Style="@("visibility: " + (HomeStateContainer.IsDrawerOpen ? HomeStateContainer.Visibility : "hidden"))">
                    <MudPaper Width="300px" Height="100%" Elevation="0">
                        <MudStack AlignItems="AlignItems.Start" Class="mud-hidden">
                            <MudTreeView Items="@HomeStateContainer.TreeItemData" @bind-SelectedValue="@HomeStateContainer.SelectedItem"
                                         SelectionMode="SelectionMode.ToggleSelection" ServerData="ServerData"
                                         Width="300px">
                                <ItemTemplate Context="context">
                                    <MudTreeViewItem
                                        Value="@context.Value"
                                        Text="@context.Value!.Name"
                                        Items="@context.Children"
                                        ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<FolderTreeItem>>>(items => OnItemsLoaded(context, items)))"
                                        @bind-Expanded="@context.Expanded"
                                        CanExpand="@context.Expandable"
                                        Icon="@context.Icon"
                                        IconExpanded="@Icons.Custom.Uncategorized.FolderOpen"
                                        IconColor="@(context.Value!.ProjectRoot ? Color.Tertiary : Color.Default)"
                                        LoadingIconColor="Color.Info">
                                        <BodyContent Context="inner">
                                            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                                <MudText Style="justify-self: start;">@context.Text</MudText>
                                                <div style="justify-self: end;">
                                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                                                        @if(inner.Text != "Root")
                                                        {
                                                            @if (inner.Value!.Type is FolderTreeItemType.Markdown)
                                                            {
                                                                <MudMenuItem Label="Edit" Icon="@Icons.Material.Filled.EditNote" OnClick="@(() => EditItemAsync(inner.Value.Path))"/>
                                                            }
                                                            @if (inner.Value.Name != "Images")
                                                            {
                                                                <MudMenuItem Label="Rename" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => RenameItemAsync(context))"/>
                                                            }
                                                            @if (inner.Value is { Type: FolderTreeItemType.Folder, Name: not "Images" })
                                                            {
                                                                <MudMenuItem Label="Create file" Icon="@Icons.Material.Filled.NoteAdd" OnClick="@(() => DeleteItemAsync(context))"/>
                                                            }
                                                            @if (inner.Value is { Type: FolderTreeItemType.Folder, ProjectRoot: true })
                                                            {
                                                                <MudMenuItem Label="Create folder" Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="@(() => DeleteItemAsync(context))"/>
                                                            }
                                                            @if (inner.Value is { Type: FolderTreeItemType.Folder, ProjectRoot: false } && !IsItemInProject(inner.Value.Path))
                                                            {
                                                                <MudMenuItem Label="Create project" Icon="@Icons.Material.Filled.FolderSpecial" OnClick="@(() => DeleteItemAsync(context))"/>
                                                            }
                                                            <MudMenuItem Label="Delete" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteItemAsync(context))"/>
                                                        }
                                                        else
                                                        {
                                                            <MudMenuItem Label="Create folder" Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="@(() => DeleteItemAsync(context))"/>
                                                            <MudMenuItem Label="Create project" Icon="@Icons.Material.Filled.FolderSpecial" OnClick="@(() => DeleteItemAsync(context))"/>
                                                        }
                                                    </MudMenu>
                                                </div>
                                            </div>
                                        </BodyContent>
                                    </MudTreeViewItem>
                                </ItemTemplate>
                            </MudTreeView>
                        </MudStack>
                    </MudPaper>
                </MudDrawerContainer>
            </MudDrawer>
        </MudItem>
    </div>
    <MudItem Class="mud-width-full">
        <div class="ma-5 mud-height-full">
            @if (!HomeStateContainer.EditMode && HomeStateContainer.SelectedItem?.Type is FolderTreeItemType.Markdown)
            {
                <Preview FilePath="@HomeStateContainer.SelectedItem?.Path" />
            }
            @if (HomeStateContainer.EditMode)
            {
                @if (_markdownValue is null)
                {
                    <div style="display: flex; justify-content: center; align-items: center; height: 100%; width: 100%; overflow: unset">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    </div>
                }
                else
                {
                    <MarkdownEditor
                        Value="@_markdownValue" ValueChanged="@OnMarkdownValueChanged"
                        ImageUploadEndpoint="@(NavigationManager.BaseUri + "api/images")"
                        UploadImage="true"
                        MaxHeight="calc(0.6 * 100vh)">
                    </MarkdownEditor>
                    <MudStack Row>
                        <MudSpacer/>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CancelEdit">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Size="Size.Small" OnClick="SaveAsync">Save</MudButton>
                    </MudStack>
                }
            }
        </div>
    </MudItem>
</MudGrid>